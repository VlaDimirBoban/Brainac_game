/*******************************************************************************************
*
*   raylib [core] example - Basic window
*
*   Welcome to raylib!
*
*   To test examples, just press F6 and execute raylib_compile_execute script
*   Note that compiled executable is placed in the same folder as .c file
*
*   You can find all basic examples on C:\raylib\raylib\examples folder or
*   raylib official webpage: www.raylib.com
*
*   Enjoy using raylib. :)
*
*   This example has been created using raylib 1.0 (www.raylib.com)
*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details)
*
*   Copyright (c) 2013-2016 Ramon Santamaria (@raysan5)
*
********************************************************************************************/
#include "raylib.h" 
#include <iostream>
#include <string>
#include <bits/stdc++.h>

void shuffle_array(int arr[], int n)
{
 
    // To obtain a time-based seed
    unsigned seed = 0;
 
    // Shuffling our array using random_shuffle
    std::random_shuffle(arr, arr + n);

}

int main(void)
{
    // Initialization
    //--------------------------------------------------------------------------------------
    const int screenWidth = 1250;
    const int screenHeight = 800;


    InitWindow(screenWidth, screenHeight, "Memory Tilez BOI");
    InitAudioDevice();

    Sound ende = LoadSound("./sound/ende.mp3");
    Sound clickFX = LoadSound("./sound/click.mp3");
    Texture2D Tex[9];
    Texture2D TexD[4][4];

     Tex[0] = LoadTexture("./aset/1.png");
     Tex[1] = LoadTexture("./aset/2.png");
     Tex[2] = LoadTexture("./aset/3.png");
     Tex[3] = LoadTexture("./aset/4.png");
     Tex[4] = LoadTexture("./aset/5.png");
     Tex[5] = LoadTexture("./aset/6.png");
     Tex[6] = LoadTexture("./aset/7.png");
     Tex[7] = LoadTexture("./aset/8.png");
     Tex[8] = LoadTexture("./aset/9.png");

    int arr[9] = {0,1,2,3,4,5,6,7,8};
    int prase[4][4];
    int tiles[8];
    int matrix[16];
    int pprase[2];
    int g=0;

    shuffle_array(arr, 9);

    for (int i = 0; i<8; i++){
            tiles[i]=arr[i];
        }
    for (int i=0; i<16; i++){
         if (i<8){
             matrix[i]=tiles[i];
         }
         else{
             matrix[i]=tiles[i-8];
         }
    
    }

    shuffle_array(matrix, 16);

    for (int i=0; i<4; i++){
        for (int j=0; j<4; j++){
            prase[i][j]=matrix[g];
            g++;
        }
    }

    int k = 0;

    for (int i=0; i<4; i++){
        for(int j=0; j<4;j++){
            TexD[i][j]=Tex[matrix[k]];
            k++;
        }
    } 


            
    // stanje pokrivenosti (sve su nule na pocetku), pravimo za fiksni niz.

    int btnState [4][4]; 

    for (int i=0; i<4; i++){
        for (int j=0; j<4; j++){
            btnState[i][j]= 0;
        }
    }


    float frameWidth = 150; // na pola iseces da prikazes prvu polovinu teksture sourcerec.x = btnState * frameWidth;

    Rectangle sourceRec [4][4];

    for (int i=0; i<4; i++){
        for (int j=0; j<4; j++){
            sourceRec[i][j]=  { 0, 0, 150, 150 };
        }
    }
   
    
    Rectangle dodir[4][4]; // nacrtasmo nevidljivi pravougaonik na koj je moguce kliknuti
  

    for (int i=0; i<4; i++){
        for (int j=0; j<4; j++){
            dodir[i][j]= { i*170.0f+300.0f , j*170.0f+100.0f, 150, 150};
        }
    }

    
    Vector2 mousePoint = {0.0f, 0.0f};

    SetTargetFPS(60);      // Set our game to run at 60 frames-per-second


    float timer = 0.0f;
    int frame = 1;
    int clicks = 0;
    int comp = 0;
    int once = 0;
    bool endState = false;
    int endState1 = 0;
    int *ptr[2];
    int a=0;
    int b=0;
  
    // Main game loop
    while (!WindowShouldClose())    // Detect window close button or ESC key
    {
                // Update
        //----------------------------------------------------------------------------------
        // TODO: Update your variables here
        //----------------------------------------------------------------------------------
       /*  mousePoint = GetMousePosition();
        timer += GetFrameTime(); */

       // Provera random generatora niza

      if (once < 1){


       for (int i=0; i<4; i++){
           for (int j=0; j<4; j++){
                if ( j%4 == 0 ) std::cout << std::endl;
                std::cout << " " << prase[i][j];
           }
        }

        std::cout << std::endl;

       once++;

      }

        mousePoint = GetMousePosition();
        timer += GetFrameTime();

        if (timer >= 0.16f){
            timer = 0.0f;
            frame += 1;
        }

        // Check button state

        //if (frame<20){
            
            if (clicks<2){

            for (int i=0; i<4; i++){
                for (int j=0; j<4; j++){
                    if (CheckCollisionPointRec(mousePoint, dodir[i][j])){

                        if (IsMouseButtonReleased(MOUSE_BUTTON_LEFT)) {
                            PlaySound(clickFX);
                            btnState[i][j] = 1;
                            ptr[a]= &btnState[i][j];
                            pprase[comp] = prase[j][i];
                            clicks++;
                            comp++;
                            a++;
                            // std::cout << "Prase :" << pprase[comp];
                            // std::cout << std::endl;
                            } 
                        }
                    } 
                }

            }


         for (int i=0; i<4; i++){
            for (int j=0; j<4; j++){
                sourceRec[i][j].x = btnState[i][j]*frameWidth;
            }  
        } 

       if (frame>30){
           if (clicks==2)
            if (pprase[0] != pprase[1]) {
                *ptr[0] = 0;
                *ptr[1] = 0;
                clicks=0;
                comp=0;
                a=0;
            } 
            if (pprase[0] == pprase[1]) {
                clicks=0;
                comp=0;
                a=0;
            } 
            frame = 0;
        }

        for (int i=0; i<4; i++){
            for (int j=0; j<4; j++){
                sourceRec[i][j].x = btnState[i][j]*frameWidth;
            }     
        } 
        
        // Blok za zavrsetak igre. Ako u nizu imas 16 total vrednost (ako je plocica otkrivena btnState[i][j] ima vrednost 1, u suprotnom je 0)
        for (int i=0; i<4; i++){
            for (int j=0; j<4; j++){
                endState1+=btnState[i][j];
            }     
        } 

        if (endState1 == 16){endState = true;}
        endState1 = 0;

        if (endState && b<1)
        {
            PlaySound(ende);
            b++;
        } 

        //}

        // Proveriti da li su teksture iste i ako jesu zadrzati ih prikazane
        // Poseban niz za ovo? There is only one niz, samo iscrtavam razlicite delove texture
        // znaci da se resetovanje btnState-a ne odnosi na njih? Onda i btnState moze da bude 2dimenzionalni niz i onda svako dugme ima svoj state
        // Problem je kako resetovati jer ispadam iz petlje? hmmm neki pointer ostaviti? kao da se uprdelo dugme :D


        // Draw
        //----------------------------------------------------------------------------------
        BeginDrawing();
        
            
            ClearBackground(WHITE);

            // sabloni da ne vadim dokumentaciju usranu <3
            // DrawTexture(Tex1, screenWidth/2-150, screenHeight/2-150, WHITE); 
            // DrawTexture(Tex2, screenWidth/2-400, screenHeight/2-400, WHITE); 

            for (int i=0; i<4; i++){
                for (int j=0; j<4; j++){
                    // umesto Tex[i][j] treba da bude reprezentacija prase[i][j]
                    DrawTextureRec(TexD[j][i] ,sourceRec[i][j], (Vector2){ i*170.0f+300.0f, j*170.0f+100.0f}, WHITE); 
                    }
                }

            
            if (endState){
                DrawRectangle(screenWidth/2-260, screenHeight/2-110, 520, 220, BLACK);
                DrawRectangle(screenWidth/2-250, screenHeight/2-100, 500, 200, WHITE);
                DrawText("Imas mozak, nisi totalno autist, heheheh", screenWidth/2-200, screenHeight/2, 20, BLACK);
            }
           
            // DrawRectangle(500, 300, 150, 150, WHITE);
            // DrawTexture(Texture2D texture, int posX, int posY, Color tint);    
            
        // DrawText("Congrats! You created your first window!", 0, 0, 20, BLACK);

        EndDrawing();
        //----------------------------------------------------------------------------------
    }

    // De-Initialization
    //--------------------------------------------------------------------------------------
    CloseWindow();        // Close window and OpenGL context
    //--------------------------------------------------------------------------------------

    return 0;
}